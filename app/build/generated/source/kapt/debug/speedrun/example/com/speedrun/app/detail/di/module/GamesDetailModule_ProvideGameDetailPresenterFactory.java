// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package speedrun.example.com.speedrun.app.detail.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import speedrun.example.com.speedrun.app.detail.presenter.GamesDetailPresenter;
import speedrun.example.com.speedrun.app.detail.usecase.GamesDetailUseCase;

public final class GamesDetailModule_ProvideGameDetailPresenterFactory
    implements Factory<GamesDetailPresenter> {
  private final GamesDetailModule module;

  private final Provider<GamesDetailUseCase> gamesDetailUseCaseProvider;

  public GamesDetailModule_ProvideGameDetailPresenterFactory(
      GamesDetailModule module, Provider<GamesDetailUseCase> gamesDetailUseCaseProvider) {
    assert module != null;
    this.module = module;
    assert gamesDetailUseCaseProvider != null;
    this.gamesDetailUseCaseProvider = gamesDetailUseCaseProvider;
  }

  @Override
  public GamesDetailPresenter get() {
    return Preconditions.checkNotNull(
        module.provideGameDetailPresenter(gamesDetailUseCaseProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<GamesDetailPresenter> create(
      GamesDetailModule module, Provider<GamesDetailUseCase> gamesDetailUseCaseProvider) {
    return new GamesDetailModule_ProvideGameDetailPresenterFactory(
        module, gamesDetailUseCaseProvider);
  }
}
