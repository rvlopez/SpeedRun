// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package speedrun.example.com.speedrun.app.detail.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import speedrun.example.com.speedrun.app.detail.usecase.GamesDetailUseCase;
import speedrun.example.com.speedrun.data.repository.SpeedRunRepository;

public final class GamesDetailModule_ProvideGameDetailUseCaseFactory
    implements Factory<GamesDetailUseCase> {
  private final GamesDetailModule module;

  private final Provider<SpeedRunRepository> speedRunRepositoryProvider;

  public GamesDetailModule_ProvideGameDetailUseCaseFactory(
      GamesDetailModule module, Provider<SpeedRunRepository> speedRunRepositoryProvider) {
    assert module != null;
    this.module = module;
    assert speedRunRepositoryProvider != null;
    this.speedRunRepositoryProvider = speedRunRepositoryProvider;
  }

  @Override
  public GamesDetailUseCase get() {
    return Preconditions.checkNotNull(
        module.provideGameDetailUseCase(speedRunRepositoryProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<GamesDetailUseCase> create(
      GamesDetailModule module, Provider<SpeedRunRepository> speedRunRepositoryProvider) {
    return new GamesDetailModule_ProvideGameDetailUseCaseFactory(
        module, speedRunRepositoryProvider);
  }
}
