// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package speedrun.example.com.speedrun.app.detail.usecase;

import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.MembersInjectors;
import javax.inject.Provider;
import speedrun.example.com.speedrun.data.repository.SpeedRunRepository;

public final class GamesDetailUseCase_Factory implements Factory<GamesDetailUseCase> {
  private final MembersInjector<GamesDetailUseCase> gamesDetailUseCaseMembersInjector;

  private final Provider<SpeedRunRepository> speedRunRepositoryProvider;

  public GamesDetailUseCase_Factory(
      MembersInjector<GamesDetailUseCase> gamesDetailUseCaseMembersInjector,
      Provider<SpeedRunRepository> speedRunRepositoryProvider) {
    assert gamesDetailUseCaseMembersInjector != null;
    this.gamesDetailUseCaseMembersInjector = gamesDetailUseCaseMembersInjector;
    assert speedRunRepositoryProvider != null;
    this.speedRunRepositoryProvider = speedRunRepositoryProvider;
  }

  @Override
  public GamesDetailUseCase get() {
    return MembersInjectors.injectMembers(
        gamesDetailUseCaseMembersInjector,
        new GamesDetailUseCase(speedRunRepositoryProvider.get()));
  }

  public static Factory<GamesDetailUseCase> create(
      MembersInjector<GamesDetailUseCase> gamesDetailUseCaseMembersInjector,
      Provider<SpeedRunRepository> speedRunRepositoryProvider) {
    return new GamesDetailUseCase_Factory(
        gamesDetailUseCaseMembersInjector, speedRunRepositoryProvider);
  }
}
