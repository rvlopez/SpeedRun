// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package speedrun.example.com.speedrun.app.di.component;

import dagger.MembersInjector;
import dagger.internal.MembersInjectors;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import speedrun.example.com.speedrun.SpeedRunApplication;
import speedrun.example.com.speedrun.app.detail.di.component.GamesDetailComponent;
import speedrun.example.com.speedrun.app.detail.di.module.GamesDetailModule;
import speedrun.example.com.speedrun.app.detail.di.module.GamesDetailModule_ProvideGameDetailPresenterFactory;
import speedrun.example.com.speedrun.app.detail.di.module.GamesDetailModule_ProvideGameDetailUseCaseFactory;
import speedrun.example.com.speedrun.app.detail.di.module.GamesDetailModule_ProvideSpeedRunApiFactory;
import speedrun.example.com.speedrun.app.detail.di.module.GamesDetailModule_ProvideSpeedRunDataSourceFactory;
import speedrun.example.com.speedrun.app.detail.di.module.GamesDetailModule_ProvideSpeedRunRepositoryFactory;
import speedrun.example.com.speedrun.app.detail.presenter.GamesDetailPresenter;
import speedrun.example.com.speedrun.app.detail.usecase.GamesDetailUseCase;
import speedrun.example.com.speedrun.app.detail.view.GameDetailActivity;
import speedrun.example.com.speedrun.app.detail.view.GameDetailActivity_MembersInjector;
import speedrun.example.com.speedrun.app.di.module.ApplicationModule;
import speedrun.example.com.speedrun.app.games.di.component.GamesComponent;
import speedrun.example.com.speedrun.app.games.di.module.GamesModule;
import speedrun.example.com.speedrun.app.games.di.module.GamesModule_ProvideGamesPresenterFactory;
import speedrun.example.com.speedrun.app.games.di.module.GamesModule_ProvideGamesUseCaseFactory;
import speedrun.example.com.speedrun.app.games.di.module.GamesModule_ProvideSpeedRunApiFactory;
import speedrun.example.com.speedrun.app.games.di.module.GamesModule_ProvideSpeedRunDataSourceFactory;
import speedrun.example.com.speedrun.app.games.di.module.GamesModule_ProvideSpeedRunRepositoryFactory;
import speedrun.example.com.speedrun.app.games.usecase.GamesUseCase;
import speedrun.example.com.speedrun.app.games.view.GameListActivity;
import speedrun.example.com.speedrun.app.games.view.GameListActivity_MembersInjector;
import speedrun.example.com.speedrun.app.games.view.GamesView;
import speedrun.example.com.speedrun.core.presenter.Presenter;
import speedrun.example.com.speedrun.data.datasource.SpeedRunApi;
import speedrun.example.com.speedrun.data.datasource.SpeedRunDataSource;
import speedrun.example.com.speedrun.data.datasource.mapper.RunsDtoMapper_Factory;
import speedrun.example.com.speedrun.data.datasource.mapper.SpeedRunDtoMapper_Factory;
import speedrun.example.com.speedrun.data.repository.SpeedRunRepository;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private DaggerApplicationComponent(Builder builder) {
    assert builder != null;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static ApplicationComponent create() {
    return new Builder().build();
  }

  @Override
  public void inject(SpeedRunApplication application) {
    MembersInjectors.<SpeedRunApplication>noOp().injectMembers(application);
  }

  @Override
  public GamesComponent plus(GamesModule gamesModule) {
    return new GamesComponentImpl(gamesModule);
  }

  @Override
  public GamesDetailComponent plus(GamesDetailModule gamesDetailModule) {
    return new GamesDetailComponentImpl(gamesDetailModule);
  }

  public static final class Builder {
    private Builder() {}

    public ApplicationComponent build() {
      return new DaggerApplicationComponent(this);
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This
     *     method is a no-op. For more, see https://google.github.io/dagger/unused-modules.
     */
    @Deprecated
    public Builder applicationModule(ApplicationModule applicationModule) {
      Preconditions.checkNotNull(applicationModule);
      return this;
    }
  }

  private final class GamesComponentImpl implements GamesComponent {
    private final GamesModule gamesModule;

    private Provider<SpeedRunApi> provideSpeedRunApiProvider;

    private Provider<SpeedRunDataSource> provideSpeedRunDataSourceProvider;

    private Provider<SpeedRunRepository> provideSpeedRunRepositoryProvider;

    private Provider<GamesUseCase> provideGamesUseCaseProvider;

    private Provider<Presenter<GamesView>> provideGamesPresenterProvider;

    private MembersInjector<GameListActivity> gameListActivityMembersInjector;

    private GamesComponentImpl(GamesModule gamesModule) {
      this.gamesModule = Preconditions.checkNotNull(gamesModule);
      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {

      this.provideSpeedRunApiProvider = GamesModule_ProvideSpeedRunApiFactory.create(gamesModule);

      this.provideSpeedRunDataSourceProvider =
          GamesModule_ProvideSpeedRunDataSourceFactory.create(
              gamesModule,
              provideSpeedRunApiProvider,
              SpeedRunDtoMapper_Factory.create(),
              RunsDtoMapper_Factory.create());

      this.provideSpeedRunRepositoryProvider =
          GamesModule_ProvideSpeedRunRepositoryFactory.create(
              gamesModule, provideSpeedRunDataSourceProvider);

      this.provideGamesUseCaseProvider =
          GamesModule_ProvideGamesUseCaseFactory.create(
              gamesModule, provideSpeedRunRepositoryProvider);

      this.provideGamesPresenterProvider =
          GamesModule_ProvideGamesPresenterFactory.create(gamesModule, provideGamesUseCaseProvider);

      this.gameListActivityMembersInjector =
          GameListActivity_MembersInjector.create(provideGamesPresenterProvider);
    }

    @Override
    public void inject(GameListActivity activity) {
      gameListActivityMembersInjector.injectMembers(activity);
    }
  }

  private final class GamesDetailComponentImpl implements GamesDetailComponent {
    private final GamesDetailModule gamesDetailModule;

    private Provider<SpeedRunApi> provideSpeedRunApiProvider;

    private Provider<SpeedRunDataSource> provideSpeedRunDataSourceProvider;

    private Provider<SpeedRunRepository> provideSpeedRunRepositoryProvider;

    private Provider<GamesDetailUseCase> provideGameDetailUseCaseProvider;

    private Provider<GamesDetailPresenter> provideGameDetailPresenterProvider;

    private MembersInjector<GameDetailActivity> gameDetailActivityMembersInjector;

    private GamesDetailComponentImpl(GamesDetailModule gamesDetailModule) {
      this.gamesDetailModule = Preconditions.checkNotNull(gamesDetailModule);
      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {

      this.provideSpeedRunApiProvider =
          GamesDetailModule_ProvideSpeedRunApiFactory.create(gamesDetailModule);

      this.provideSpeedRunDataSourceProvider =
          GamesDetailModule_ProvideSpeedRunDataSourceFactory.create(
              gamesDetailModule,
              provideSpeedRunApiProvider,
              SpeedRunDtoMapper_Factory.create(),
              RunsDtoMapper_Factory.create());

      this.provideSpeedRunRepositoryProvider =
          GamesDetailModule_ProvideSpeedRunRepositoryFactory.create(
              gamesDetailModule, provideSpeedRunDataSourceProvider);

      this.provideGameDetailUseCaseProvider =
          GamesDetailModule_ProvideGameDetailUseCaseFactory.create(
              gamesDetailModule, provideSpeedRunRepositoryProvider);

      this.provideGameDetailPresenterProvider =
          GamesDetailModule_ProvideGameDetailPresenterFactory.create(
              gamesDetailModule, provideGameDetailUseCaseProvider);

      this.gameDetailActivityMembersInjector =
          GameDetailActivity_MembersInjector.create(provideGameDetailPresenterProvider);
    }

    @Override
    public void inject(GameDetailActivity activity) {
      gameDetailActivityMembersInjector.injectMembers(activity);
    }
  }
}
