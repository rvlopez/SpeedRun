// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package speedrun.example.com.speedrun.app.games.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import speedrun.example.com.speedrun.app.games.usecase.GamesUseCase;
import speedrun.example.com.speedrun.app.games.view.GamesView;
import speedrun.example.com.speedrun.core.presenter.Presenter;

public final class GamesModule_ProvideGamesPresenterFactory
    implements Factory<Presenter<GamesView>> {
  private final GamesModule module;

  private final Provider<GamesUseCase> gamesUseCaseProvider;

  public GamesModule_ProvideGamesPresenterFactory(
      GamesModule module, Provider<GamesUseCase> gamesUseCaseProvider) {
    assert module != null;
    this.module = module;
    assert gamesUseCaseProvider != null;
    this.gamesUseCaseProvider = gamesUseCaseProvider;
  }

  @Override
  public Presenter<GamesView> get() {
    return Preconditions.checkNotNull(
        module.provideGamesPresenter(gamesUseCaseProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<Presenter<GamesView>> create(
      GamesModule module, Provider<GamesUseCase> gamesUseCaseProvider) {
    return new GamesModule_ProvideGamesPresenterFactory(module, gamesUseCaseProvider);
  }
}
