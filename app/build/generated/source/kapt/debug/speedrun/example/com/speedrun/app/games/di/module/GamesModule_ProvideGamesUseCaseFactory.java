// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package speedrun.example.com.speedrun.app.games.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import speedrun.example.com.speedrun.app.games.usecase.GamesUseCase;
import speedrun.example.com.speedrun.data.repository.SpeedRunRepository;

public final class GamesModule_ProvideGamesUseCaseFactory implements Factory<GamesUseCase> {
  private final GamesModule module;

  private final Provider<SpeedRunRepository> speedRunRepositoryProvider;

  public GamesModule_ProvideGamesUseCaseFactory(
      GamesModule module, Provider<SpeedRunRepository> speedRunRepositoryProvider) {
    assert module != null;
    this.module = module;
    assert speedRunRepositoryProvider != null;
    this.speedRunRepositoryProvider = speedRunRepositoryProvider;
  }

  @Override
  public GamesUseCase get() {
    return Preconditions.checkNotNull(
        module.provideGamesUseCase(speedRunRepositoryProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static Factory<GamesUseCase> create(
      GamesModule module, Provider<SpeedRunRepository> speedRunRepositoryProvider) {
    return new GamesModule_ProvideGamesUseCaseFactory(module, speedRunRepositoryProvider);
  }
}
