// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package speedrun.example.com.speedrun.app.games.presenter;

import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.MembersInjectors;
import javax.inject.Provider;
import speedrun.example.com.speedrun.app.games.usecase.GamesUseCase;

public final class GamesPresenter_Factory implements Factory<GamesPresenter> {
  private final MembersInjector<GamesPresenter> gamesPresenterMembersInjector;

  private final Provider<GamesUseCase> gamesUseCaseProvider;

  public GamesPresenter_Factory(
      MembersInjector<GamesPresenter> gamesPresenterMembersInjector,
      Provider<GamesUseCase> gamesUseCaseProvider) {
    assert gamesPresenterMembersInjector != null;
    this.gamesPresenterMembersInjector = gamesPresenterMembersInjector;
    assert gamesUseCaseProvider != null;
    this.gamesUseCaseProvider = gamesUseCaseProvider;
  }

  @Override
  public GamesPresenter get() {
    return MembersInjectors.injectMembers(
        gamesPresenterMembersInjector, new GamesPresenter(gamesUseCaseProvider.get()));
  }

  public static Factory<GamesPresenter> create(
      MembersInjector<GamesPresenter> gamesPresenterMembersInjector,
      Provider<GamesUseCase> gamesUseCaseProvider) {
    return new GamesPresenter_Factory(gamesPresenterMembersInjector, gamesUseCaseProvider);
  }
}
