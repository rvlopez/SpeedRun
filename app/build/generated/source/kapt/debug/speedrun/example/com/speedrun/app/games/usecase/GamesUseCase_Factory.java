// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package speedrun.example.com.speedrun.app.games.usecase;

import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.MembersInjectors;
import javax.inject.Provider;
import speedrun.example.com.speedrun.data.repository.SpeedRunRepository;

public final class GamesUseCase_Factory implements Factory<GamesUseCase> {
  private final MembersInjector<GamesUseCase> gamesUseCaseMembersInjector;

  private final Provider<SpeedRunRepository> speedRunRepositoryProvider;

  public GamesUseCase_Factory(
      MembersInjector<GamesUseCase> gamesUseCaseMembersInjector,
      Provider<SpeedRunRepository> speedRunRepositoryProvider) {
    assert gamesUseCaseMembersInjector != null;
    this.gamesUseCaseMembersInjector = gamesUseCaseMembersInjector;
    assert speedRunRepositoryProvider != null;
    this.speedRunRepositoryProvider = speedRunRepositoryProvider;
  }

  @Override
  public GamesUseCase get() {
    return MembersInjectors.injectMembers(
        gamesUseCaseMembersInjector, new GamesUseCase(speedRunRepositoryProvider.get()));
  }

  public static Factory<GamesUseCase> create(
      MembersInjector<GamesUseCase> gamesUseCaseMembersInjector,
      Provider<SpeedRunRepository> speedRunRepositoryProvider) {
    return new GamesUseCase_Factory(gamesUseCaseMembersInjector, speedRunRepositoryProvider);
  }
}
