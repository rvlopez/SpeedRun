// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package speedrun.example.com.speedrun.data.datasource;

import dagger.internal.Factory;
import javax.inject.Provider;
import speedrun.example.com.speedrun.data.datasource.mapper.RunsDtoMapper;
import speedrun.example.com.speedrun.data.datasource.mapper.SpeedRunDtoMapper;

public final class SpeedRunDataSource_Factory implements Factory<SpeedRunDataSource> {
  private final Provider<SpeedRunApi> speedRunApiProvider;

  private final Provider<SpeedRunDtoMapper> speedRunDtoMapperProvider;

  private final Provider<RunsDtoMapper> runsDtoMapperProvider;

  public SpeedRunDataSource_Factory(
      Provider<SpeedRunApi> speedRunApiProvider,
      Provider<SpeedRunDtoMapper> speedRunDtoMapperProvider,
      Provider<RunsDtoMapper> runsDtoMapperProvider) {
    assert speedRunApiProvider != null;
    this.speedRunApiProvider = speedRunApiProvider;
    assert speedRunDtoMapperProvider != null;
    this.speedRunDtoMapperProvider = speedRunDtoMapperProvider;
    assert runsDtoMapperProvider != null;
    this.runsDtoMapperProvider = runsDtoMapperProvider;
  }

  @Override
  public SpeedRunDataSource get() {
    return new SpeedRunDataSource(
        speedRunApiProvider.get(), speedRunDtoMapperProvider.get(), runsDtoMapperProvider.get());
  }

  public static Factory<SpeedRunDataSource> create(
      Provider<SpeedRunApi> speedRunApiProvider,
      Provider<SpeedRunDtoMapper> speedRunDtoMapperProvider,
      Provider<RunsDtoMapper> runsDtoMapperProvider) {
    return new SpeedRunDataSource_Factory(
        speedRunApiProvider, speedRunDtoMapperProvider, runsDtoMapperProvider);
  }
}
